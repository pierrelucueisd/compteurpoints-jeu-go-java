@startuml

title Diagramme de classe du jeu de go

class GameController {
    + startGame()
    - playTurn()
    - allPlayerHavePassed()
}

class GameConsole {
    + promptAction(Player): Action
    + printBoard(string)
    + printResultError(ErrorType)
}

interface Deserializer {
    + deserialize(string)
}

interface Action {
    + execute(BoardController, Player)
    + isAllowed(BoardController, Player)
}

enum ErrorType {
    Ko
    Suicide
    InvalidPosition
    IntersectionTaken
}

class PlayerCarousel {
    - List<Player> players;
    + nextTurn()
    + getCurrentPlayer() : Player
}

class Player {
    - color: Color
    + hasPassed(): boolean
    + pass()
    + resetPass()
}

enum Color{
    BLACK
    WHITE
}

class Board {
    - size: int
    - intersections: List<Intersection>
    + putStone(Position, Color)
    + getIntersection(Position): Intersection
    + getStoneGroup(Stone, List<Optional<Color>>)
    - removePrisoners(Intersection): void
}

class BoardController {
    - List<Board> boardHistory;
    - Board current;
    + addBoard(Board);
    + putStoneOnBoard(Position, Player)
    + getSecondLastBoard(): Board;
    + isPositionValid(Position)
    + isIntersectionVacant(Position)
    + isActionSuicide(Position, Player)
    + isActionKo(Position, Player)
}

class Intersection {
    - occupation: Color
    - position: Position
    + isVacant()
    + isEnemy()
    + isFriendly()
    + hasPosition(Position)
    + getNeighbors(Board)
    + getEnemyNeighbors(Board)
    + getFriendlyNeighbors(Board)
}

class Position {
    - int x
    - int y
    + isValid(Board)
}

GameController o-> BoardController
GameController --> PlayerCarousel
GameController --> GameConsole

GameConsole -> Deserializer
GameConsole -.> Action

BoardController o--> Board
BoardController .> Player

Board *-> Intersection

Intersection -> Position

PositionDeserializer --> Deserializer

Action -.> BoardController
Action .> Player
Action -> ErrorType

PassAction --> Action
PlayAction --> Action

Player -> Color

@enduml