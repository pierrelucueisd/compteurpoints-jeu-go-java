@startuml


class PlayerPointsCalculator {
    +PlayerPointsCalculator(\n\t int maxTeritorySize, \n\t EncircledAreaInterface encircledRoot \n)
    +CalculatePlayerPoint(Player p) : int
}
PlayerPointsCalculator .. CalculatePlayerPointsVisitorInterface
PlayerPointsCalculator .. EncircledAreaInterface

interface CalculatePlayerPointsVisitorInterface {
    +getReachedIntersections(): List<Intersections>
    +getPoints(): int
}
CalculatePlayerPointsVisitorInterface <|-- CalculatePlayerPointVisitor

interface Visitor {
    +visit(EncircledAreaInterface)
}
Visitor <|- CalculatePlayerPointsVisitorInterface

class ConnectedIntersectionsFetcher {
    +ConnectedIntersectionsFetcher(List<Optional<Color>>, \n\tList<Intersections> contexte)
    +fetchAll(): Optional
    -fetchFromIntersection():Optional<List<Intersection>>
}



Interface EncircledAreaInterface {
    +accept(Visitor v)
    +getColor(): Optional<color>
    +getEncircledIntersections() : List<intersections>
    +getBorderConectedStones() : Optional<List<Intersections>>
    +getSubEncircledArea() : List<EncircledAreaInterface>

}
class EncircledArea{
  -List<Intersection> borderConectedStones
  -List<Intersection> encircledIntersections
  -List<EncircledAreaInterface>
}

EncircledAreaInterface <-- EncircledArea
EncircledAreaInterface --o EncircledArea


class EncicrlingAreaFetcher{
    +EncicrlingAreaFetcher(\n\t Optional<Color> color, \n\t List<intersections> liste, \n\t)
    +fetch(): EncircledAreaInterface

}
EncicrlingAreaFetcher .. ConnectedIntersectionsFetcher
EncicrlingAreaFetcher .. BorderFetcher

class BorderFetcher {
    +BordeFetcher(\n\tColor c, \n\tList<Intersection> contexte, \n\tList<Intersection>
     )
     +fetch() : List<Intersection>
}

EncicrlingAreaFetcher . EncircledAreaInterface


EncircledAreaInterface . Visitor




@enduml